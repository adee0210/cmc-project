"""
Test script ƒë·ªÉ ki·ªÉm tra s·ªë l∆∞·ª£ng b·∫£n ghi m√† API tr·∫£ v·ªÅ v·ªõi c√°c kho·∫£ng th·ªùi gian kh√°c nhau.
M·ª•c ƒë√≠ch: Ph√°t hi·ªán gi·ªõi h·∫°n s·ªë b·∫£n ghi c·ªßa API v√† x√°c ƒë·ªãnh kho·∫£ng th·ªùi gian t·ªëi ∆∞u.
"""

import sys
import os
from datetime import datetime, timedelta
import requests
import time

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), ".")))

from config.variable_config import EXTRACT_DATA_CONFIG


def test_api_with_timespan(symbol: str, cmc_id: int, days: int, interval: str = "15m"):
    """Test API v·ªõi m·ªôt kho·∫£ng th·ªùi gian c·ª• th·ªÉ.

    Args:
        symbol: T√™n symbol (ETH, BNB, XRP)
        cmc_id: CMC ID c·ªßa symbol
        days: S·ªë ng√†y ƒë·ªÉ test
        interval: Kho·∫£ng th·ªùi gian gi·ªØa c√°c ƒëi·ªÉm d·ªØ li·ªáu (15m, 1h, 1d, etc.)

    Returns:
        S·ªë l∆∞·ª£ng b·∫£n ghi tr·∫£ v·ªÅ
    """
    api_config = EXTRACT_DATA_CONFIG.get("api", {})
    url_template = api_config.get("url_template", "")
    convert_id = api_config.get("convert_id", 2781)

    # T√≠nh to√°n th·ªùi gian
    time_end = datetime.now()
    time_start = time_end - timedelta(days=days)

    ts_start = int(time_start.timestamp())
    ts_end = int(time_end.timestamp())

    # Format URL
    url = url_template.format(
        id=cmc_id,
        convertId=convert_id,
        timeStart=ts_start,
        timeEnd=ts_end,
        interval=interval,
    )

    print(f"\n{'='*70}")
    print(f"Testing: {symbol.upper()}")
    print(f"Kho·∫£ng th·ªùi gian: {days} ng√†y(s)")
    print(f"T·ª´: {time_start.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"ƒê·∫øn: {time_end.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"Interval: {interval}")
    print(f"{'='*70}")

    try:
        response = requests.get(url, timeout=30)
        response.raise_for_status()

        data = response.json()

        if "data" in data:
            quotes = data["data"].get("quotes", [])
            num_records = len(quotes)

            print(f"‚úì S·ªë b·∫£n ghi tr·∫£ v·ªÅ: {num_records}")

            # Th√¥ng tin chi ti·∫øt
            if quotes:
                first_quote = quotes[0]
                last_quote = quotes[-1]

                first_time = first_quote.get("timeClose", "N/A")
                last_time = last_quote.get("timeClose", "N/A")

                print(f"  - B·∫£n ghi ƒë·∫ßu ti√™n: {first_time}")
                print(f"  - B·∫£n ghi cu·ªëi c√πng: {last_time}")

                # T√≠nh to√°n s·ªë b·∫£n ghi l√Ω thuy·∫øt
                if interval == "15m":
                    expected_records = days * 24 * 4  # 4 b·∫£n ghi m·ªói gi·ªù
                elif interval == "1h":
                    expected_records = days * 24
                elif interval == "1d":
                    expected_records = days
                else:
                    expected_records = None

                if expected_records:
                    print(f"  - S·ªë b·∫£n ghi l√Ω thuy·∫øt: {expected_records}")
                    print(
                        f"  - T·ª∑ l·ªá: {num_records}/{expected_records} = {num_records/expected_records*100:.2f}%"
                    )

                    if num_records < expected_records:
                        print(f"  ‚ö†Ô∏è  API c√≥ th·ªÉ ƒëang gi·ªõi h·∫°n s·ªë b·∫£n ghi!")

            return num_records
        else:
            print("‚úó Kh√¥ng c√≥ d·ªØ li·ªáu trong response")
            return 0

    except Exception as e:
        print(f"‚úó L·ªói khi g·ªçi API: {str(e)}")
        return 0


def test_cumulative_records(
    symbol: str, cmc_id: int, max_days: int = 7, interval: str = "15m"
):
    """Test xem s·ªë b·∫£n ghi c√≥ tƒÉng tuy·∫øn t√≠nh khi tƒÉng s·ªë ng√†y hay kh√¥ng.

    N·∫øu API c√≥ gi·ªõi h·∫°n, s·ªë b·∫£n ghi s·∫Ω kh√¥ng tƒÉng tuy·∫øn t√≠nh.
    """
    print(f"\n{'#'*70}")
    print(f"# TEST T√çCH L≈®Y: {symbol.upper()}")
    print(f"# Ki·ªÉm tra xem s·ªë b·∫£n ghi c√≥ tƒÉng tuy·∫øn t√≠nh kh√¥ng")
    print(f"{'#'*70}")

    results = []

    for days in [1, 2, 3, 5, 7]:
        if days > max_days:
            break

        num_records = test_api_with_timespan(symbol, cmc_id, days, interval)
        results.append((days, num_records))

        # Delay ƒë·ªÉ tr√°nh rate limit
        time.sleep(1)

    # Ph√¢n t√≠ch k·∫øt qu·∫£
    print(f"\n{'='*70}")
    print(f"PH√ÇN T√çCH K·∫æT QU·∫¢ CHO {symbol.upper()}:")
    print(f"{'='*70}")
    print(f"{'S·ªë ng√†y':<15} {'S·ªë b·∫£n ghi':<15} {'TƒÉng tr∆∞·ªüng':<20}")
    print(f"{'-'*70}")

    for i, (days, records) in enumerate(results):
        if i == 0:
            growth = "-"
        else:
            prev_records = results[i - 1][1]
            if prev_records > 0:
                growth_rate = (records - prev_records) / prev_records * 100
                growth = f"+{records - prev_records} ({growth_rate:+.2f}%)"
            else:
                growth = "N/A"

        print(f"{days:<15} {records:<15} {growth:<20}")

    # K·∫øt lu·∫≠n
    print(f"\n{'='*70}")
    print("K·∫æT LU·∫¨N:")

    if len(results) >= 2:
        # Ki·ªÉm tra xem c√≥ gi·ªõi h·∫°n kh√¥ng
        first_day_records = results[0][1]
        last_day_records = results[-1][1]
        expected_ratio = results[-1][0] / results[0][0]
        actual_ratio = (
            last_day_records / first_day_records if first_day_records > 0 else 0
        )

        print(f"  - T·ª∑ l·ªá l√Ω thuy·∫øt (ng√†y): {expected_ratio:.2f}x")
        print(f"  - T·ª∑ l·ªá th·ª±c t·∫ø (b·∫£n ghi): {actual_ratio:.2f}x")

        if abs(actual_ratio - expected_ratio) < 0.1:
            print(f"  ‚úì Kh√¥ng c√≥ gi·ªõi h·∫°n r√µ r√†ng - s·ªë b·∫£n ghi tƒÉng tuy·∫øn t√≠nh")
        else:
            print(f"  ‚ö†Ô∏è  C√≥ th·ªÉ c√≥ gi·ªõi h·∫°n - s·ªë b·∫£n ghi KH√îNG tƒÉng tuy·∫øn t√≠nh")

            # ∆Ø·ªõc t√≠nh gi·ªõi h·∫°n
            max_records = max([r[1] for r in results])
            print(f"  ‚ö†Ô∏è  Gi·ªõi h·∫°n ∆∞·ªõc t√≠nh: ~{max_records} b·∫£n ghi")

            # ƒê·ªÅ xu·∫•t batch_seconds t·ªëi ∆∞u
            if interval == "15m" and max_records > 0:
                # M·ªói gi·ªù c√≥ 4 b·∫£n ghi (interval 15m)
                max_hours = max_records / 4
                max_days = max_hours / 24
                optimal_batch = int(max_days * 24 * 3600)

                print(
                    f"  üí° ƒê·ªÅ xu·∫•t batch_seconds t·ªëi ∆∞u: {optimal_batch} gi√¢y (~{max_days:.1f} ng√†y)"
                )

    print(f"{'='*70}\n")

    return results


def main():
    """Main function ƒë·ªÉ ch·∫°y t·∫•t c·∫£ c√°c test."""

    print("\n" + "=" * 70)
    print(" TEST API LIMIT - KI·ªÇM TRA GI·ªöI H·∫†N S·ªê B·∫¢N GHI")
    print("=" * 70)

    symbols_config = EXTRACT_DATA_CONFIG.get("cmc_symbol_ids", {})
    interval = EXTRACT_DATA_CONFIG.get("api", {}).get("interval", "15m")

    print(f"\nC·∫•u h√¨nh:")
    print(f"  - Interval: {interval}")
    print(f"  - Symbols: {list(symbols_config.keys())}")

    # Test cho t·ª´ng symbol
    all_results = {}

    for symbol, cmc_id in symbols_config.items():
        results = test_cumulative_records(
            symbol=symbol, cmc_id=cmc_id, max_days=7, interval=interval
        )
        all_results[symbol] = results

        # Delay gi·ªØa c√°c symbol
        time.sleep(2)

    # T·ªïng k·∫øt chung
    print(f"\n{'#'*70}")
    print("# T·ªîNG K·∫æT TO√ÄN B·ªò SYMBOLS")
    print(f"{'#'*70}\n")

    for symbol, results in all_results.items():
        if results:
            max_records = max([r[1] for r in results])
            print(f"{symbol.upper():<10} - S·ªë b·∫£n ghi t·ªëi ƒëa: {max_records}")

    print("\n" + "=" * 70)
    print("Ho√†n th√†nh test!")
    print("=" * 70)


if __name__ == "__main__":
    main()
